import { useState, useRef, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { ArrowLeft, Users, Calendar as CalendarIcon, Send, FileText, Loader2, Bot, User, Sparkles, ChevronDown, ChevronUp } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { generateAIResponse, isGeminiConfigured, type HealthContext } from "@/services/geminiService";

// Placeholder caregiver data
const placeholderCaregivers = [
  { id: "1", name: "Dr. Sarah Johnson", relationship: "Primary Care Physician", email: "sarah.johnson@clinic.com" },
  { id: "2", name: "Mary Smith", relationship: "Daughter", email: "mary.smith@email.com" },
  { id: "3", name: "John Doe", relationship: "Son", email: "john.doe@email.com" },
  { id: "4", name: "Nurse Patricia", relationship: "Home Care Nurse", email: "patricia@homecare.com" },
];

// Chat message interface
interface ChatMessage {
  id: string;
  sender: 'caregiver' | 'ai';
  message: string;
  timestamp: Date;
}



export default function CaregiverCommunication() {
  const navigate = useNavigate();
  const [selectedCaregiver, setSelectedCaregiver] = useState<string>("");
  const [startDate, setStartDate] = useState<Date>();
  const [endDate, setEndDate] = useState<Date>();
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedSummary, setGeneratedSummary] = useState("");

  // Chat state
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [isAITyping, setIsAITyping] = useState(false);
  const [chatStarted, setChatStarted] = useState(false);
  const [isFormExpanded, setIsFormExpanded] = useState(false);
  const chatEndRef = useRef<HTMLDivElement>(null);

  // Auto-scroll to bottom of chat
  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [chatMessages, isAITyping]);

  const handleGenerateSummary = async () => {
    if (!selectedCaregiver || !startDate || !endDate) {
      return;
    }

    setIsGenerating(true);

    // Simulate API call to generate summary
    setTimeout(() => {
      const caregiver = placeholderCaregivers.find(c => c.id === selectedCaregiver);
      const summary = `Health Summary Report
Generated on: ${format(new Date(), "PPP")}
Period: ${format(startDate, "PPP")} - ${format(endDate, "PPP")}
Caregiver: ${caregiver?.name} (${caregiver?.relationship})

MEDICATION ADHERENCE:
✅ Excellent compliance - 95% of scheduled doses taken on time
• Metformin 500mg: Taken consistently twice daily
• Lisinopril 10mg: Taken consistently once daily (morning)
• Vitamin D3: Taken 6 out of 7 days

VITAL SIGNS TRACKING:
📊 Blood Pressure: Average 128/82 mmHg (3 readings)
📊 Blood Glucose: Average 142 mg/dL (daily readings)
📊 Weight: Stable at 165 lbs
📊 Heart Rate: Average 72 bpm

HEALTH ALERTS:
⚠️ 1 missed medication dose on ${format(new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), "PPP")} (evening Metformin)
ℹ️ Blood glucose slightly elevated on 2 occasions - may need dietary review

ACTIVITY SUMMARY:
• Logged vitals 12 out of ${Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))} days
• Responded to 8 medication reminders promptly
• No emergency alerts triggered

RECOMMENDATIONS:
• Continue current medication regimen
• Consider dietary consultation for glucose management
• Maintain excellent medication adherence

This report was automatically generated by HealthGuard AI.`;

      setGeneratedSummary(summary);
      setIsGenerating(false);

      // Start chat with AI summary as first message
      if (!chatStarted) {
        const aiMessage: ChatMessage = {
          id: Date.now().toString(),
          sender: 'ai',
          message: summary,
          timestamp: new Date()
        };
        setChatMessages([aiMessage]);
        setChatStarted(true);
      }
    }, 2000);
  };

  const handleSendMessage = async () => {
    if (!newMessage.trim()) return;

    const currentMessage = newMessage;
    const caregiver = placeholderCaregivers.find(c => c.id === selectedCaregiver);

    // Add user message
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      sender: 'caregiver',
      message: currentMessage,
      timestamp: new Date()
    };

    setChatMessages(prev => [...prev, userMessage]);
    setNewMessage("");

    // Show typing indicator
    setIsAITyping(true);

    try {
      // Prepare health context for Gemini
      const healthContext: HealthContext = {
        patientSummary: generatedSummary,
        caregiverName: caregiver?.name || 'Caregiver',
        caregiverRelationship: caregiver?.relationship || 'Healthcare Provider'
      };

      // Get conversation history for context
      const conversationHistory = chatMessages.map(msg => ({
        sender: msg.sender === 'caregiver' ? caregiver?.name || 'Caregiver' : 'AI Assistant',
        message: msg.message
      }));

      // Generate AI response using Gemini
      const aiResponseText = await generateAIResponse(
        currentMessage,
        healthContext,
        conversationHistory
      );

      const aiResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        sender: 'ai',
        message: aiResponseText,
        timestamp: new Date()
      };

      setChatMessages(prev => [...prev, aiResponse]);
    } catch (error) {
      console.error('Error generating AI response:', error);

      // Fallback error message
      const errorResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        sender: 'ai',
        message: "I apologize, but I'm having trouble processing your request right now. Please try again in a moment.",
        timestamp: new Date()
      };

      setChatMessages(prev => [...prev, errorResponse]);
    } finally {
      setIsAITyping(false);
    }
  };



  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card shadow-card">
        <div className="container mx-auto px-4 py-4">
          <Button
            variant="ghost"
            onClick={() => navigate("/dashboard")}
            className="gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            Back to Dashboard
          </Button>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8 max-w-7xl">
        <div className="animate-fade-in">
          <div className="flex items-center gap-3 mb-2">
            <div className="p-2 bg-primary/10 rounded-lg">
              <Users className="h-6 w-6 text-primary" />
            </div>
            <h1 className="text-3xl font-bold">AI Caregiver Assistant</h1>
          </div>
          <p className="text-muted-foreground mb-8">
            Generate health summaries and chat with our AI assistant for personalized insights and recommendations
          </p>

          {/* Conditional Layout - Centered initially, then 2-column after generation */}
          {!chatStarted ? (
            /* Centered Generate Form - Before Chat Started */
            <div className="max-w-2xl mx-auto">
              <Card className="p-8 shadow-card">
                <div className="text-center mb-8">
                  <div className="p-4 bg-primary/10 rounded-full w-20 h-20 mx-auto mb-4 flex items-center justify-center">
                    <FileText className="h-10 w-10 text-primary" />
                  </div>
                  <h2 className="text-3xl font-bold mb-4">Generate Health Summary</h2>
                  <p className="text-muted-foreground text-lg">
                    Create a comprehensive health report to start your AI-powered consultation
                  </p>
                </div>

                <div className="space-y-8">
                  {/* Caregiver Selection */}
                  <div className="space-y-3">
                    <Label htmlFor="caregiver" className="text-lg font-medium">Select Caregiver</Label>
                    <Select value={selectedCaregiver} onValueChange={setSelectedCaregiver}>
                      <SelectTrigger className="h-14 text-base">
                        <SelectValue placeholder="Choose a caregiver to send the summary to" />
                      </SelectTrigger>
                      <SelectContent>
                        {placeholderCaregivers.map((caregiver) => (
                          <SelectItem key={caregiver.id} value={caregiver.id}>
                            <div className="flex flex-col py-2">
                              <span className="font-medium text-base">{caregiver.name}</span>
                              <span className="text-sm text-muted-foreground">{caregiver.relationship}</span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Date Range Selection */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-3">
                      <Label className="text-lg font-medium">Start Date</Label>
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full justify-start text-left font-normal h-14 text-base",
                              !startDate && "text-muted-foreground"
                            )}
                          >
                            <CalendarIcon className="mr-3 h-5 w-5" />
                            {startDate ? format(startDate, "PPP") : "Pick start date"}
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0">
                          <Calendar
                            mode="single"
                            selected={startDate}
                            onSelect={setStartDate}
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                    </div>

                    <div className="space-y-3">
                      <Label className="text-lg font-medium">End Date</Label>
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full justify-start text-left font-normal h-14 text-base",
                              !endDate && "text-muted-foreground"
                            )}
                          >
                            <CalendarIcon className="mr-3 h-5 w-5" />
                            {endDate ? format(endDate, "PPP") : "Pick end date"}
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-auto p-0">
                          <Calendar
                            mode="single"
                            selected={endDate}
                            onSelect={setEndDate}
                            initialFocus
                          />
                        </PopoverContent>
                      </Popover>
                    </div>
                  </div>

                  {/* Generate Button */}
                  <Button
                    onClick={handleGenerateSummary}
                    disabled={!selectedCaregiver || !startDate || !endDate || isGenerating}
                    className="w-full h-16 text-lg font-semibold"
                    size="lg"
                  >
                    {isGenerating ? (
                      <>
                        <Loader2 className="h-6 w-6 mr-3 animate-spin" />
                        Generating Summary & Starting Chat...
                      </>
                    ) : (
                      <>
                        <FileText className="h-6 w-6 mr-3" />
                        Generate Summary & Start Chat
                      </>
                    )}
                  </Button>
                </div>
              </Card>

              {/* Instructions Card */}
              <Card className="mt-8 p-6 shadow-card bg-accent/30 border-accent">
                <div className="flex items-start gap-4">
                  <Bot className="h-6 w-6 text-primary mt-1" />
                  <div>
                    <p className="font-semibold text-lg mb-2">
                      {isGeminiConfigured() ? "Gemini AI Chat Assistant" : "AI Chat Assistant"}
                    </p>
                    <p className="text-muted-foreground">
                      After generating a health summary, you can chat with our {isGeminiConfigured() ? "Gemini-powered" : ""} AI assistant to ask questions
                      about the patient's health status, medications, vitals, and get personalized insights.
                      {!isGeminiConfigured() && " (Currently using local responses - configure Gemini API for enhanced AI capabilities)"}
                    </p>
                  </div>
                </div>
              </Card>
            </div>
          ) : (
            /* 2 Column Layout - After Chat Started */
            <div className="grid grid-cols-1 lg:grid-cols-5 gap-6 items-start">
              {/* Left Column - Compact Generate Form & Big Health Summary */}
              <div className="lg:col-span-3 space-y-6">
                {/* Collapsible Summary Generation Form */}
                <Card className="p-4 shadow-card">
                  {/* Collapsed Header */}
                  <div 
                    className="flex items-center justify-between cursor-pointer"
                    onClick={() => setIsFormExpanded(!isFormExpanded)}
                  >
                    <div className="flex items-center gap-2">
                      <FileText className="h-4 w-4" />
                      <h2 className="text-lg font-semibold">Generate Health Summary</h2>
                      {generatedSummary && (
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                          Generated
                        </span>
                      )}
                    </div>
                    <Button variant="ghost" size="sm" className="p-1">
                      {isFormExpanded ? (
                        <ChevronUp className="h-4 w-4" />
                      ) : (
                        <ChevronDown className="h-4 w-4" />
                      )}
                    </Button>
                  </div>

                  {/* Expandable Content */}
                  {isFormExpanded && (
                    <div className="mt-4 space-y-4 animate-in slide-in-from-top-2 duration-200">
                      {/* Compact Caregiver Selection */}
                      <div className="space-y-2">
                        <Label htmlFor="caregiver" className="text-sm">Select Caregiver</Label>
                        <Select value={selectedCaregiver} onValueChange={setSelectedCaregiver}>
                          <SelectTrigger className="h-10">
                            <SelectValue placeholder="Choose caregiver" />
                          </SelectTrigger>
                          <SelectContent>
                            {placeholderCaregivers.map((caregiver) => (
                              <SelectItem key={caregiver.id} value={caregiver.id}>
                                <div className="flex flex-col">
                                  <span className="font-medium">{caregiver.name}</span>
                                  <span className="text-xs text-muted-foreground">{caregiver.relationship}</span>
                                </div>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      {/* Compact Date Range */}
                      <div className="grid grid-cols-2 gap-3">
                        <div className="space-y-2">
                          <Label className="text-sm">Start Date</Label>
                          <Popover>
                            <PopoverTrigger asChild>
                              <Button
                                variant="outline"
                                className={cn(
                                  "w-full justify-start text-left font-normal h-10 text-sm",
                                  !startDate && "text-muted-foreground"
                                )}
                              >
                                <CalendarIcon className="mr-2 h-3 w-3" />
                                {startDate ? format(startDate, "MMM d") : "Start"}
                              </Button>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0">
                              <Calendar
                                mode="single"
                                selected={startDate}
                                onSelect={setStartDate}
                                initialFocus
                              />
                            </PopoverContent>
                          </Popover>
                        </div>

                        <div className="space-y-2">
                          <Label className="text-sm">End Date</Label>
                          <Popover>
                            <PopoverTrigger asChild>
                              <Button
                                variant="outline"
                                className={cn(
                                  "w-full justify-start text-left font-normal h-10 text-sm",
                                  !endDate && "text-muted-foreground"
                                )}
                              >
                                <CalendarIcon className="mr-2 h-3 w-3" />
                                {endDate ? format(endDate, "MMM d") : "End"}
                              </Button>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0">
                              <Calendar
                                mode="single"
                                selected={endDate}
                                onSelect={setEndDate}
                                initialFocus
                              />
                            </PopoverContent>
                          </Popover>
                        </div>
                      </div>

                      {/* Compact Generate Button */}
                      <Button
                        onClick={handleGenerateSummary}
                        disabled={!selectedCaregiver || !startDate || !endDate || isGenerating}
                        className="w-full h-10"
                        size="sm"
                      >
                        {isGenerating ? (
                          <>
                            <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                            Regenerating...
                          </>
                        ) : (
                          <>
                            <FileText className="h-4 w-4 mr-2" />
                            Regenerate Summary
                          </>
                        )}
                      </Button>
                    </div>
                  )}

                  {/* Quick Summary Info when Collapsed */}
                  {!isFormExpanded && generatedSummary && (
                    <div className="mt-3 text-sm text-muted-foreground">
                      <div className="flex items-center justify-between">
                        <span>
                          {placeholderCaregivers.find(c => c.id === selectedCaregiver)?.name} • 
                          {startDate && endDate && ` ${format(startDate, "MMM d")} - ${format(endDate, "MMM d")}`}
                        </span>
                        <span className="text-xs">Click to modify</span>
                      </div>
                    </div>
                  )}
                </Card>

                {/* Big Health Summary Display */}
                {generatedSummary && (
                  <Card className="p-6 shadow-card h-[598px] flex flex-col">
                    <div className="flex items-center gap-3 mb-6">
                      <div className="p-3 bg-accent/20 rounded-lg">
                        <FileText className="h-6 w-6 text-accent-foreground" />
                      </div>
                      <h2 className="text-2xl font-bold">Health Summary Report</h2>
                    </div>

                    {/* Big Summary Display */}
                    <div className="bg-gradient-to-b from-muted/30 to-muted/10 border-2 border-border rounded-xl p-8 flex-1 overflow-y-auto">
                      <div className="space-y-6">
                        <div className="whitespace-pre-wrap text-base leading-relaxed font-mono">
                          {generatedSummary}
                        </div>
                        <div className="pt-6 border-t-2 border-border">
                          <div className="flex items-start gap-3 p-4 bg-primary/10 rounded-lg">
                            <Sparkles className="h-5 w-5 text-primary mt-0.5 flex-shrink-0" />
                            <div>
                              <p className="font-semibold text-base mb-2">💡 How to Use This Summary</p>
                              <p className="text-sm text-muted-foreground">
                                This comprehensive health report provides context for the AI assistant. Use the chat on the right to ask specific questions about any section, request explanations for concerning data points, or get personalized recommendations based on the patient's health trends.
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Card>
                )}
              </div>

              {/* Right Column - Chat Interface */}
              <div className="lg:col-span-2 h-[724px]">
                <Card className="p-4 shadow-card h-full flex flex-col">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-bold flex items-center gap-2">
                    <div className="p-1.5 bg-primary/10 rounded-lg">
                      <Bot className="h-4 w-4 text-primary" />
                    </div>
                    AI Chat Assistant
                  </h2>
                  <div className="flex items-center gap-2 px-3 py-1 rounded-full bg-accent/50">
                    {isGeminiConfigured() ? (
                      <>
                        <Sparkles className="h-4 w-4 text-primary" />
                        <span className="text-primary font-medium text-sm">Gemini AI</span>
                      </>
                    ) : (
                      <>
                        <Bot className="h-4 w-4 text-muted-foreground" />
                        <span className="text-muted-foreground text-sm">Local AI</span>
                      </>
                    )}
                  </div>
                </div>

                {/* Chat Messages Container */}
                <div className="border-2 border-border rounded-xl bg-gradient-to-b from-background to-muted/20 flex-1 overflow-y-auto p-4 mb-4 space-y-4">
                  {chatMessages.map((message) => (
                    <div
                      key={message.id}
                      className={cn(
                        "flex gap-4 animate-fade-in",
                        message.sender === 'caregiver' ? "justify-end" : "justify-start"
                      )}
                    >
                      {message.sender === 'ai' && (
                        <Avatar className="h-8 w-8 border border-primary/20">
                          <AvatarFallback className="bg-gradient-to-br from-primary to-primary/80 text-primary-foreground">
                            <Bot className="h-4 w-4" />
                          </AvatarFallback>
                        </Avatar>
                      )}

                      <div
                        className={cn(
                          "max-w-[90%] rounded-xl p-3 shadow-sm",
                          message.sender === 'caregiver'
                            ? "bg-gradient-to-br from-primary to-primary/90 text-primary-foreground ml-auto"
                            : "bg-background border border-border"
                        )}
                      >
                        <div className="whitespace-pre-wrap text-xs leading-relaxed">
                          {message.message}
                        </div>
                        <div className={cn(
                          "text-xs mt-1 opacity-70",
                          message.sender === 'caregiver' ? "text-primary-foreground/70" : "text-muted-foreground"
                        )}>
                          {format(message.timestamp, "HH:mm")}
                        </div>
                      </div>

                      {message.sender === 'caregiver' && (
                        <Avatar className="h-8 w-8 border border-secondary/20">
                          <AvatarFallback className="bg-gradient-to-br from-secondary to-secondary/80">
                            <User className="h-4 w-4" />
                          </AvatarFallback>
                        </Avatar>
                      )}
                    </div>
                  ))}

                  {/* Compact Typing Indicator */}
                  {isAITyping && (
                    <div className="flex gap-3 justify-start animate-fade-in">
                      <Avatar className="h-8 w-8 border border-primary/20">
                        <AvatarFallback className="bg-gradient-to-br from-primary to-primary/80 text-primary-foreground">
                          <Bot className="h-4 w-4" />
                        </AvatarFallback>
                      </Avatar>
                      <div className="bg-background border border-border rounded-xl p-3 shadow-sm">
                        <div className="flex items-center gap-2 text-muted-foreground">
                          <span className="text-xs">AI is thinking</span>
                          <div className="flex gap-1">
                            <div className="w-1.5 h-1.5 bg-primary rounded-full animate-bounce"></div>
                            <div className="w-1.5 h-1.5 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                            <div className="w-1.5 h-1.5 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  <div ref={chatEndRef} />
                </div>

                {/* Compact Message Input */}
                <div className="space-y-3">
                  <div className="flex gap-2">
                    <Textarea
                      placeholder="Ask about medications, vitals, health trends..."
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                          e.preventDefault();
                          handleSendMessage();
                        }
                      }}
                      className="flex-1 min-h-[60px] resize-none text-sm border-2 border-border rounded-lg p-3 focus:border-primary transition-colors"
                      disabled={isAITyping}
                    />
                    <Button
                      onClick={handleSendMessage}
                      disabled={!newMessage.trim() || isAITyping}
                      className="self-end h-9 w-9 rounded-lg"
                      size="icon"
                    >
                      <Send className="h-3 w-3" />
                    </Button>
                  </div>
                  
                  {/* Compact Quick Action Buttons */}
                  <div className="flex flex-wrap gap-1">
                    {[
                      "Insights",
                      "Medications",
                      "Vitals",
                      "Focus"
                    ].map((suggestion) => (
                      <Button
                        key={suggestion}
                        variant="outline"
                        size="sm"
                        onClick={() => setNewMessage(`What are the key ${suggestion.toLowerCase()}?`)}
                        disabled={isAITyping}
                        className="text-xs rounded-full border hover:bg-primary hover:text-primary-foreground transition-colors px-3 py-1 h-7"
                      >
                        {suggestion}
                      </Button>
                    ))}
                  </div>

                  {/* Compact Chat Tips */}
                  <div className="p-2 bg-accent/30 border border-accent/50 rounded-lg">
                    <div className="flex items-start gap-2">
                      <Sparkles className="h-3 w-3 text-primary mt-0.5 flex-shrink-0" />
                      <div>
                        <p className="font-medium text-xs mb-1">💡 Tips</p>
                        <p className="text-xs text-muted-foreground">
                          Ask specific questions about the health summary or get personalized recommendations.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
              </div>
            </div>
          )}


        </div>
      </main>
    </div>
  );
}