import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { ArrowLeft, Users, Calendar as CalendarIcon, Send, FileText, Loader2 } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";

// Placeholder caregiver data
const placeholderCaregivers = [
  { id: "1", name: "Dr. Sarah Johnson", relationship: "Primary Care Physician", email: "sarah.johnson@clinic.com" },
  { id: "2", name: "Mary Smith", relationship: "Daughter", email: "mary.smith@email.com" },
  { id: "3", name: "John Doe", relationship: "Son", email: "john.doe@email.com" },
  { id: "4", name: "Nurse Patricia", relationship: "Home Care Nurse", email: "patricia@homecare.com" },
];

export default function CaregiverCommunication() {
  const navigate = useNavigate();
  const [selectedCaregiver, setSelectedCaregiver] = useState<string>("");
  const [startDate, setStartDate] = useState<Date>();
  const [endDate, setEndDate] = useState<Date>();
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [generatedSummary, setGeneratedSummary] = useState("");

  const handleGenerateSummary = async () => {
    if (!selectedCaregiver || !startDate || !endDate) {
      return;
    }

    setIsGenerating(true);
    
    // Simulate API call to generate summary
    setTimeout(() => {
      const caregiver = placeholderCaregivers.find(c => c.id === selectedCaregiver);
      const summary = `Health Summary Report
Generated on: ${format(new Date(), "PPP")}
Period: ${format(startDate, "PPP")} - ${format(endDate, "PPP")}
Caregiver: ${caregiver?.name} (${caregiver?.relationship})

MEDICATION ADHERENCE:
✅ Excellent compliance - 95% of scheduled doses taken on time
• Metformin 500mg: Taken consistently twice daily
• Lisinopril 10mg: Taken consistently once daily (morning)
• Vitamin D3: Taken 6 out of 7 days

VITAL SIGNS TRACKING:
📊 Blood Pressure: Average 128/82 mmHg (3 readings)
📊 Blood Glucose: Average 142 mg/dL (daily readings)
📊 Weight: Stable at 165 lbs
📊 Heart Rate: Average 72 bpm

HEALTH ALERTS:
⚠️ 1 missed medication dose on ${format(new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), "PPP")} (evening Metformin)
ℹ️ Blood glucose slightly elevated on 2 occasions - may need dietary review

ACTIVITY SUMMARY:
• Logged vitals 12 out of ${Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))} days
• Responded to 8 medication reminders promptly
• No emergency alerts triggered

RECOMMENDATIONS:
• Continue current medication regimen
• Consider dietary consultation for glucose management
• Maintain excellent medication adherence

This report was automatically generated by HealthGuard AI.`;
      
      setGeneratedSummary(summary);
      setIsGenerating(false);
    }, 2000);
  };

  const handleSendToCaregiver = async () => {
    if (!generatedSummary || !selectedCaregiver) return;

    setIsSending(true);
    
    // Simulate sending email
    setTimeout(() => {
      const caregiver = placeholderCaregivers.find(c => c.id === selectedCaregiver);
      alert(`Summary sent successfully to ${caregiver?.name} at ${caregiver?.email}`);
      setIsSending(false);
    }, 1500);
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card shadow-card">
        <div className="container mx-auto px-4 py-4">
          <Button
            variant="ghost"
            onClick={() => navigate("/dashboard")}
            className="gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            Back to Dashboard
          </Button>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8 max-w-4xl">
        <div className="animate-fade-in">
          <div className="flex items-center gap-3 mb-2">
            <div className="p-2 bg-primary/10 rounded-lg">
              <Users className="h-6 w-6 text-primary" />
            </div>
            <h1 className="text-3xl font-bold">Caregiver Communication Manager</h1>
          </div>
          <p className="text-muted-foreground mb-8">
            Generate and send comprehensive health summaries to your caregivers and healthcare providers
          </p>

          {/* Summary Generation Form */}
          <Card className="p-6 shadow-card mb-6">
            <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
              <FileText className="h-5 w-5" />
              Generate Health Summary
            </h2>
            
            <div className="space-y-6">
              {/* Caregiver Selection */}
              <div className="space-y-2">
                <Label htmlFor="caregiver">Select Caregiver</Label>
                <Select value={selectedCaregiver} onValueChange={setSelectedCaregiver}>
                  <SelectTrigger>
                    <SelectValue placeholder="Choose a caregiver to send the summary to" />
                  </SelectTrigger>
                  <SelectContent>
                    {placeholderCaregivers.map((caregiver) => (
                      <SelectItem key={caregiver.id} value={caregiver.id}>
                        <div className="flex flex-col">
                          <span className="font-medium">{caregiver.name}</span>
                          <span className="text-sm text-muted-foreground">{caregiver.relationship}</span>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Date Range Selection */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Start Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !startDate && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {startDate ? format(startDate, "PPP") : "Pick start date"}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0">
                      <Calendar
                        mode="single"
                        selected={startDate}
                        onSelect={setStartDate}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>

                <div className="space-y-2">
                  <Label>End Date</Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        className={cn(
                          "w-full justify-start text-left font-normal",
                          !endDate && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {endDate ? format(endDate, "PPP") : "Pick end date"}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0">
                      <Calendar
                        mode="single"
                        selected={endDate}
                        onSelect={setEndDate}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                </div>
              </div>

              {/* Generate Button */}
              <Button
                onClick={handleGenerateSummary}
                disabled={!selectedCaregiver || !startDate || !endDate || isGenerating}
                className="w-full"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Generating Summary...
                  </>
                ) : (
                  <>
                    <FileText className="h-4 w-4 mr-2" />
                    Generate Health Summary
                  </>
                )}
              </Button>
            </div>
          </Card>

          {/* Generated Summary Display */}
          <Card className="p-6 shadow-card">
            <h2 className="text-xl font-semibold mb-6 flex items-center gap-2">
              <Send className="h-5 w-5" />
              Caregiver Digest
            </h2>
            
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="summary">Generated Summary</Label>
                <Textarea
                  id="summary"
                  placeholder="Your generated health summary will appear here after clicking 'Generate Health Summary'..."
                  value={generatedSummary}
                  onChange={(e) => setGeneratedSummary(e.target.value)}
                  className="min-h-[300px] font-mono text-sm"
                  readOnly={!generatedSummary}
                />
              </div>

              <Button
                onClick={handleSendToCaregiver}
                disabled={!generatedSummary || !selectedCaregiver || isSending}
                className="w-full"
                variant={generatedSummary ? "default" : "secondary"}
              >
                {isSending ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Sending...
                  </>
                ) : (
                  <>
                    <Send className="h-4 w-4 mr-2" />
                    Send to Caregiver
                  </>
                )}
              </Button>
            </div>
          </Card>

          {/* Info Card */}
          <Card className="mt-6 p-4 bg-accent/50 border-accent">
            <div className="flex items-start gap-3">
              <Users className="h-5 w-5 text-primary mt-0.5" />
              <div className="text-sm">
                <p className="font-semibold mb-1">About Caregiver Summaries</p>
                <p className="text-muted-foreground">
                  These AI-generated summaries provide a comprehensive overview of medication adherence, 
                  vital signs, health alerts, and activity patterns. All data is securely processed and 
                  only shared with authorized caregivers.
                </p>
              </div>
            </div>
          </Card>
        </div>
      </main>
    </div>
  );
}